class: "OutputTest"
success: "PASS"
failure: "NO PASS: Problem using your actions to form plans (the wrong plans were formed). This can be caused by a variety of problems with your action definitions."

# Python statements initializing variables for the test below.
preamble: """
from pddl_plan import *
action_transit = create_action_transit()
action_orient = create_action_orient()
action_recenter = create_action_recenter()
action_pick = create_action_pick()
action_place = create_action_place()
actions = [action_transit, action_orient, action_recenter, action_pick, action_place]

objects_of_type = {'robot': ['robot0'], 
                    'room': ['room0', 'room1'],
                    'object': ['apple0', 'banana0'],
                    'spawn': ['desk0_desktop', 'counter0_left']
                    }

start_fluent_list = [Fluent('robot_in_room', 'robot0', 'room0'),
                        Fluent('at_spawn', 'apple0', 'desk0_desktop'),
                        Fluent('at_spawn', 'banana0', 'counter0_left'),
                        Fluent('adjacent', 'room0', 'room1'),
                        Fluent('adjacent', 'room1', 'room0'),
                        Fluent('spawn_in_room', 'desk0_desktop', 'room0'),
                        Fluent('spawn_in_room', 'counter0_left', 'room1'),
                        Fluent('empty', 'robot0'),
                        ]

start_state = State(objects_of_type, start_fluent_list)

goal_fluent_list = [Fluent('robot_in_room', 'robot0', 'room0'),
                        Fluent('at_spawn', 'apple0', 'desk0_desktop'),
                        Fluent('at_spawn', 'banana0', 'desk0_desktop'),
                        Fluent('empty', 'robot0'),
                        ]

planner = Planner()

plan = planner.solve_action(start_state, goal_fluent_list, actions)
ans1 = len(plan)


objects_of_type_2 = {'robot': ['robot0'], 
                   'room': ['room0', 'room1', 'room2', 'room3', 'room4'],
                   'object': ['apple0', 'apple1', 'apple2', 'apple3','apple4','apple5', 'apple6', 'apple7', 'apple8','apple9',],
                   'spawn': ['desk0_desktop', 'desk1_desktop', 'desk2_desktop', 'desk3_desktop', 'desk4_desktop','desk5_desktop',]
                   }
env_fluent = [Fluent('at_spawn', 'apple0', 'desk1_desktop'),
              Fluent('at_spawn', 'apple1', 'desk2_desktop'),
              Fluent('at_spawn', 'apple2', 'desk2_desktop'),
              Fluent('at_spawn', 'apple3', 'desk3_desktop'),
              Fluent('at_spawn', 'apple4', 'desk3_desktop'),
              Fluent('at_spawn', 'apple5', 'desk3_desktop'),
              Fluent('at_spawn', 'apple6', 'desk4_desktop'),
              Fluent('at_spawn', 'apple7', 'desk4_desktop'),
              Fluent('at_spawn', 'apple8', 'desk4_desktop'),
              Fluent('at_spawn', 'apple9', 'desk4_desktop'),
              Fluent('adjacent', 'room0', 'room3'),
              Fluent('adjacent', 'room3', 'room0'),
              Fluent('adjacent', 'room1', 'room2'),
              Fluent('adjacent', 'room2', 'room1'),
              Fluent('adjacent', 'room1', 'room3'),
              Fluent('adjacent', 'room3', 'room1'),
              Fluent('adjacent', 'room2', 'room3'),
              Fluent('adjacent', 'room3', 'room2'),
              Fluent('adjacent', 'room2', 'room4'),
              Fluent('adjacent', 'room4', 'room2'),
              Fluent('adjacent', 'room3', 'room4'),
              Fluent('adjacent', 'room4', 'room3'),
              Fluent('spawn_in_room', 'desk0_desktop', 'room0'),
              Fluent('spawn_in_room', 'desk1_desktop', 'room1'),
              Fluent('spawn_in_room', 'desk2_desktop', 'room2'),
              Fluent('spawn_in_room', 'desk3_desktop', 'room3'),
              Fluent('spawn_in_room', 'desk4_desktop', 'room4'),
              Fluent('empty', 'robot0'),
             ]
env_2 = copy.deepcopy(env_fluent)
env_2.append(Fluent('robot_in_room', 'robot0', 'room0'))
start_state_2 = State(objects_of_type_2, env_2)
goal_fluent_list_2 = [Fluent('robot_in_room', 'robot0', 'room0'),
                    Fluent('at_spawn', 'apple0', 'desk0_desktop'),
                    Fluent('empty', 'robot0'),
                    ]
planner = Planner()
plan = planner.solve_action(start_state_2, goal_fluent_list_2, actions)
ans2 = len(plan)

env_3 = copy.deepcopy(env_fluent)
env_3.append(Fluent('robot_in_room', 'robot0', 'room0'))
start_state_3 = State(objects_of_type_2, env_3)
goal_fluent_list_3 = [Fluent('robot_in_room', 'robot0', 'room0'),
                    Fluent('at_spawn', 'apple6', 'desk2_desktop'),
                    Fluent('empty', 'robot0'),
                    ]
planner = Planner()
plan = planner.solve_action(start_state_3, goal_fluent_list_3, actions)
ans3 = len(plan)
ans = [ans1, ans2, ans3]
"""

# A python expression to be evaluated.  This expression must return the 
# same result for the student and instructor's code.

test: "ans"

