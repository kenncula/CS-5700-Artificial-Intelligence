class: "OutputTest"
success: "PASS"
failure: "NO PASS: problem in `transit` precondition and/or arg types"

# Python statements initializing variables for the test below.
preamble: """
from pddl_plan import *
import copy

objects_of_type = {'robot': ['robot0'], 
                   'room': ['room0', 'room1', 'room2', 'room3', 'room4'],
                   'object': ['apple0', 'apple1', 'apple2', 'apple3','apple4',],
                   'spawn': ['desk0_desktop', 'desk1_desktop', 'desk2_desktop', 'desk3_desktop', 'desk4_desktop',]
                   }
env_fluent = [Fluent('at_spawn', 'apple0', 'desk0_desktop'),
              Fluent('at_spawn', 'apple1', 'desk1_desktop'),
              Fluent('at_spawn', 'apple2', 'desk2_desktop'),
              Fluent('at_spawn', 'apple3', 'desk3_desktop'),
              Fluent('at_spawn', 'apple4', 'desk4_desktop'),
              Fluent('adjacent', 'room0', 'room3'),
              Fluent('adjacent', 'room3', 'room0'),
              Fluent('adjacent', 'room1', 'room2'),
              Fluent('adjacent', 'room2', 'room1'),
              Fluent('adjacent', 'room1', 'room3'),
              Fluent('adjacent', 'room3', 'room1'),
              Fluent('adjacent', 'room2', 'room3'),
              Fluent('adjacent', 'room3', 'room2'),
              Fluent('adjacent', 'room2', 'room4'),
              Fluent('adjacent', 'room4', 'room2'),
              Fluent('adjacent', 'room3', 'room4'),
              Fluent('adjacent', 'room4', 'room3'),
              Fluent('spawn_in_room', 'desk0_desktop', 'room0'),
              Fluent('spawn_in_room', 'desk1_desktop', 'room1'),
              Fluent('spawn_in_room', 'desk2_desktop', 'room2'),
              Fluent('spawn_in_room', 'desk3_desktop', 'room3'),
              Fluent('spawn_in_room', 'desk4_desktop', 'room4'),
              Fluent('empty', 'robot0'),
            ]
env_0 = copy.deepcopy(env_fluent)
env_0.append(Fluent('robot_in_room', 'robot0', 'room0'))
state0 = State(objects_of_type, env_0)
action_transit = create_action_transit()

grounded_action_transit = action_transit.grounding(state0)
ans1 = len(grounded_action_transit)
ans2 = 0
for a in grounded_action_transit:
    if a.check_pre_condition(state0):
        ans2 += 1

env_1 = copy.deepcopy(env_fluent)
env_1.append(Fluent('robot_in_room', 'robot0', 'room1'))
state1 = State(objects_of_type, env_1)
grounded_action_transit = action_transit.grounding(state1)
ans3 = 0
for a in grounded_action_transit:
    if a.check_pre_condition(state1):
        ans3 += 1

env_2 = copy.deepcopy(env_fluent)
env_2.append(Fluent('robot_in_room', 'robot0', 'room2'))
state2 = State(objects_of_type, env_2)
grounded_action_transit = action_transit.grounding(state2)
ans4 = 0
for a in grounded_action_transit:
    if a.check_pre_condition(state2):
        ans4 += 1

env_3 = copy.deepcopy(env_fluent)
env_3.append(Fluent('robot_in_room', 'robot0', 'room3'))
state3 = State(objects_of_type, env_3)
grounded_action_transit = action_transit.grounding(state1)
ans5 = 0
for a in grounded_action_transit:
    if a.check_pre_condition(state3):
        ans5 += 1

env_4 = copy.deepcopy(env_fluent)
env_4.append(Fluent('robot_in_room', 'robot0', 'room4'))
state4 = State(objects_of_type, env_4)
grounded_action_transit = action_transit.grounding(state1)
ans6 = 0
for a in grounded_action_transit:
    if a.check_pre_condition(state4):
        ans6 += 1

env_5 = copy.deepcopy(env_4)
env_5.append(Fluent('oriented', 'robot0'))
state5 = State(objects_of_type, env_5)
grounded_action_transit = action_transit.grounding(state4)
ans7 = 0
for a in grounded_action_transit:
    if a.check_pre_condition(state5):
        ans7 += 1

ans = [ans1, ans2, ans3, ans4, ans5, ans6, ans7]
"""

# A python expression to be evaluated.  This expression must return the 
# same result for the student and instructor's code.

test: "ans"

