class: "OutputTest"
success: "PASS"
failure: "NO PASS"

# Python statements initializing variables for the test below.
preamble: """
from pddl_plan import *
import copy

objects_of_type = {'robot': ['robot0', 'robot1'], 
                   'room': ['room0', 'room1', 'room2', 'room3', 'room4'],
                   'object': ['apple0', 'apple1', 'apple2', 'apple3','apple4','apple5', 'apple6', 'apple7', 'apple8','apple9',],
                   'spawn': ['desk0_desktop', 'desk1_desktop', 'desk2_desktop', 'desk3_desktop', 'desk4_desktop','desk5_desktop',]
                   }
env_fluent = [Fluent('at', ('apple0', 'desk1_desktop')),
              Fluent('at', ('apple1', 'desk2_desktop')),
              Fluent('at', ('apple2', 'desk2_desktop')),
              Fluent('at', ('apple3', 'desk3_desktop')),
              Fluent('at', ('apple4', 'desk3_desktop')),
              Fluent('at', ('apple5', 'desk3_desktop')),
              Fluent('at', ('apple6', 'desk4_desktop')),
              Fluent('at', ('apple7', 'desk4_desktop')),
              Fluent('at', ('apple8', 'desk4_desktop')),
              Fluent('at', ('apple9', 'desk4_desktop')),
              Fluent('adjacent', ('room0', 'room3')),
              Fluent('adjacent', ('room3', 'room0')),
              Fluent('adjacent', ('room1', 'room2')),
              Fluent('adjacent', ('room2', 'room1')),
              Fluent('adjacent', ('room1', 'room3')),
              Fluent('adjacent', ('room3', 'room1')),
              Fluent('adjacent', ('room2', 'room3')),
              Fluent('adjacent', ('room3', 'room2')),
              Fluent('adjacent', ('room2', 'room4')),
              Fluent('adjacent', ('room4', 'room2')),
              Fluent('adjacent', ('room3', 'room4')),
              Fluent('adjacent', ('room4', 'room3')),
              Fluent('inside', ('desk0_desktop', 'room0')),
              Fluent('inside', ('desk1_desktop', 'room1')),
              Fluent('inside', ('desk2_desktop', 'room2')),
              Fluent('inside', ('desk3_desktop', 'room3')),
              Fluent('inside', ('desk4_desktop', 'room4')),
              Fluent('empty', ('robot0',)),
             ]
env_0 = copy.deepcopy(env_fluent)
env_0.append(Fluent('at', ('robot0', 'desk0_desktop')))
env_1 = copy.deepcopy(env_fluent)
env_1.append(Fluent('at', ('robot0', 'desk1_desktop')))
env_2 = copy.deepcopy(env_fluent)
env_2.append(Fluent('at', ('robot0', 'desk2_desktop')))
env_3 = copy.deepcopy(env_fluent)
env_3.append(Fluent('at', ('robot0', 'desk3_desktop')))
env_4 = copy.deepcopy(env_fluent)
env_4.append(Fluent('at', ('robot0', 'desk4_desktop')))

state0 = State(objects_of_type, env_0)
state1 = State(objects_of_type, env_1)
state2 = State(objects_of_type, env_2)
state3 = State(objects_of_type, env_3)
state4 = State(objects_of_type, env_4)
action_pick = create_action_pick()
ground_action_pick = action_pick.grounding(state0)
ans1 = len(ground_action_pick)

ans2 = 0
for a in ground_action_pick:
    if a.check_pre_condition(state0):
        ans2 += 1
ans3 = 0
for a in ground_action_pick:
    if a.check_pre_condition(state1):
        ans3 += 1
ans4 = 0
for a in ground_action_pick:
    if a.check_pre_condition(state2):
        ans4 += 1
ans5 = 0
for a in ground_action_pick:
    if a.check_pre_condition(state3):
        ans5 += 1
ans6 = 0
for a in ground_action_pick:
    if a.check_pre_condition(state4):
        ans6 += 1

ans = [ans1, ans2, ans3, ans4, ans5, ans6]
"""

# A python expression to be evaluated.  This expression must return the 
# same result for the student and instructor's code.

test: "ans"

