class: "OutputTest"
success: "PASS"
failure: "NO PASS: problem in `place` postcondition"

# Python statements initializing variables for the test below.
preamble: """
from pddl_plan import *
import copy

objects_of_type = {'robot': ['robot0', 'robot1'], 
                   'room': ['room0', 'room1', 'room2', 'room3', 'room4'],
                   'object': ['apple0', 'apple1', 'apple2', 'apple3','apple4','apple5', 'apple6', 'apple7', 'apple8','apple9',],
                   'spawn': ['desk0_desktop', 'desk1_desktop', 'desk2_desktop', 'desk3_desktop', 'desk4_desktop','desk5_desktop',]
                   }
env_fluent = [Fluent('at_spawn', 'apple0', 'desk0_desktop'),
              Fluent('at_spawn', 'apple1', 'desk1_desktop'),
              Fluent('at_spawn', 'apple2', 'desk2_desktop'),
              Fluent('at_spawn', 'apple3', 'desk3_desktop'),
              Fluent('at_spawn', 'apple4', 'desk4_desktop'),
              Fluent('adjacent', 'room0', 'room3'),
              Fluent('adjacent', 'room3', 'room0'),
              Fluent('adjacent', 'room1', 'room2'),
              Fluent('adjacent', 'room2', 'room1'),
              Fluent('adjacent', 'room1', 'room3'),
              Fluent('adjacent', 'room3', 'room1'),
              Fluent('adjacent', 'room2', 'room3'),
              Fluent('adjacent', 'room3', 'room2'),
              Fluent('adjacent', 'room2', 'room4'),
              Fluent('adjacent', 'room4', 'room2'),
              Fluent('adjacent', 'room3', 'room4'),
              Fluent('adjacent', 'room4', 'room3'),
              Fluent('spawn_in_room', 'desk0_desktop', 'room0'),
              Fluent('spawn_in_room', 'desk1_desktop', 'room1'),
              Fluent('spawn_in_room', 'desk2_desktop', 'room2'),
              Fluent('spawn_in_room', 'desk3_desktop', 'room3'),
              Fluent('spawn_in_room', 'desk4_desktop', 'room4'),
              Fluent('empty', 'robot0'),
              Fluent('at_spawn', 'robot0', 'desk0_desktop'),
             ]
env_fluent_s0 = [Fluent('holding', 'apple0', 'robot0'),
              Fluent('at_spawn', 'apple1', 'desk1_desktop'),
              Fluent('at_spawn', 'apple2', 'desk2_desktop'),
              Fluent('at_spawn', 'apple3', 'desk3_desktop'),
              Fluent('at_spawn', 'apple4', 'desk4_desktop'),
              Fluent('adjacent', 'room0', 'room3'),
              Fluent('adjacent', 'room3', 'room0'),
              Fluent('adjacent', 'room1', 'room2'),
              Fluent('adjacent', 'room2', 'room1'),
              Fluent('adjacent', 'room1', 'room3'),
              Fluent('adjacent', 'room3', 'room1'),
              Fluent('adjacent', 'room2', 'room3'),
              Fluent('adjacent', 'room3', 'room2'),
              Fluent('adjacent', 'room2', 'room4'),
              Fluent('adjacent', 'room4', 'room2'),
              Fluent('adjacent', 'room3', 'room4'),
              Fluent('adjacent', 'room4', 'room3'),
              Fluent('spawn_in_room', 'desk0_desktop', 'room0'),
              Fluent('spawn_in_room', 'desk1_desktop', 'room1'),
              Fluent('spawn_in_room', 'desk2_desktop', 'room2'),
              Fluent('spawn_in_room', 'desk3_desktop', 'room3'),
              Fluent('spawn_in_room', 'desk4_desktop', 'room4'),
              Fluent('at_spawn', 'robot0', 'desk0_desktop'),
             ] 
env_fluent_1 = [Fluent('at_spawn', 'apple0', 'desk0_desktop'),
              Fluent('at_spawn', 'apple1', 'desk1_desktop'),
              Fluent('at_spawn', 'apple2', 'desk2_desktop'),
              Fluent('at_spawn', 'apple3', 'desk3_desktop'),
              Fluent('at_spawn', 'apple4', 'desk4_desktop'),
              Fluent('adjacent', 'room0', 'room3'),
              Fluent('adjacent', 'room3', 'room0'),
              Fluent('adjacent', 'room1', 'room2'),
              Fluent('adjacent', 'room2', 'room1'),
              Fluent('adjacent', 'room1', 'room3'),
              Fluent('adjacent', 'room3', 'room1'),
              Fluent('adjacent', 'room2', 'room3'),
              Fluent('adjacent', 'room3', 'room2'),
              Fluent('adjacent', 'room2', 'room4'),
              Fluent('adjacent', 'room4', 'room2'),
              Fluent('adjacent', 'room3', 'room4'),
              Fluent('adjacent', 'room4', 'room3'),
              Fluent('spawn_in_room', 'desk0_desktop', 'room0'),
              Fluent('spawn_in_room', 'desk1_desktop', 'room1'),
              Fluent('spawn_in_room', 'desk2_desktop', 'room2'),
              Fluent('spawn_in_room', 'desk3_desktop', 'room3'),
              Fluent('spawn_in_room', 'desk4_desktop', 'room4'),
              Fluent('at_spawn', 'robot0', 'desk0_desktop'),
             ]
env_fluent_2 = [Fluent('at_spawn', 'apple1', 'desk1_desktop'),
              Fluent('at_spawn', 'apple2', 'desk2_desktop'),
              Fluent('at_spawn', 'apple3', 'desk3_desktop'),
              Fluent('at_spawn', 'apple4', 'desk4_desktop'),
              Fluent('adjacent', 'room0', 'room3'),
              Fluent('adjacent', 'room3', 'room0'),
              Fluent('adjacent', 'room1', 'room2'),
              Fluent('adjacent', 'room2', 'room1'),
              Fluent('adjacent', 'room1', 'room3'),
              Fluent('adjacent', 'room3', 'room1'),
              Fluent('adjacent', 'room2', 'room3'),
              Fluent('adjacent', 'room3', 'room2'),
              Fluent('adjacent', 'room2', 'room4'),
              Fluent('adjacent', 'room4', 'room2'),
              Fluent('adjacent', 'room3', 'room4'),
              Fluent('adjacent', 'room4', 'room3'),
              Fluent('spawn_in_room', 'desk0_desktop', 'room0'),
              Fluent('spawn_in_room', 'desk1_desktop', 'room1'),
              Fluent('spawn_in_room', 'desk2_desktop', 'room2'),
              Fluent('spawn_in_room', 'desk3_desktop', 'room3'),
              Fluent('spawn_in_room', 'desk4_desktop', 'room4'),
              Fluent('empty', 'robot0'),
              Fluent('at_spawn', 'robot0', 'desk0_desktop'),
             ] 
s = State(objects_of_type, env_fluent)
s0 = State(objects_of_type, env_fluent_s0)
s1 = State(objects_of_type, env_fluent_1)
s2 = State(objects_of_type, env_fluent_2)

action_place = create_action_place()
ground_action_place = action_place.grounding(s0)
place_0 = ground_action_place[0]

s0_expected = place_0.apply_post_condition(s0)
ans1 = 0
if s == s0_expected:
    ans1 = 1

ans2 = 0
if s1 == s0_expected:
    ans2 = 1

ans3 = 0
if s2 == s0_expected:
    ans3 = 1


ans = [ans1, ans2, ans3]
"""

# A python expression to be evaluated.  This expression must return the 
# same result for the student and instructor's code.

test: "ans"

